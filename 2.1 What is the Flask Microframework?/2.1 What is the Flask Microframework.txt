-> what is flask? lesson overview  
   -> learn what flask is, its origins, and why it is a popular choice for building web applications  

-> what is flask?  
   -> flask is a python framework designed to help developers build robust and scalable web applications efficiently  
   -> it is considered a microframework, meaning it provides a minimalistic approach, allowing developers to pick and choose the tools and libraries they need  

-> what is a microframework?  
   -> microframeworks provide the foundational structure for web applications without enforcing specific tools or libraries  
   -> unlike full-stack frameworks, microframeworks are lightweight and focus primarily on serving requests and returning responses  
   -> this gives developers control over key decisions like authentication, database integration, and frontend design  

   -> flask example:  

      ```python  
      from flask import Flask  

      app = Flask(__name__)  

      @app.route("/")  
      def home():  
          return "Hello, Flask World!"  

      if __name__ == "__main__":  
          app.run(debug=True)  
      ```  

   -> key analogy: think of a microframework as a basic lego base plate. you can start with the essentials and build upwards, adding features like authentication and databases  

-> background and usage of flask  
   -> flask originated as an april fools' joke by armin ronacher but quickly evolved into a widely-used framework  
   -> flask has powered major platforms and applications, including:  
      -> pinterest (api backend)  
      -> linkedin (internal tools)  
      -> twilio (public and private apis)  
      -> apache airflow (backend integration)  
      -> plotly dash (data visualisation tools)  
      -> former us president obama's 2012 campaign website  

-> why use flask?  
   -> flask's minimalistic nature allows rapid setup and customisation of web applications  

      ```python  
      from flask import Flask  

      app = Flask(__name__)  

      @app.route("/greet/<name>")  
      def greet(name):  
          return f"Hello, {name}!"  

      if __name__ == "__main__":  
          app.run(debug=True)  
      ```  

   -> you can choose the tools that suit your project, such as:  
      -> relational databases like postgresql, mysql, or sqlite  
      -> nosql databases like mongodb  
   -> flask itself only provides the basic server functionality, but the ecosystem of extensions covers features like authentication, form handling, and database management  

      example with flask-sqlalchemy:  
      ```python  
      from flask import Flask  
      from flask_sqlalchemy import SQLAlchemy  

      app = Flask(__name__)  
      app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///data.db"  
      db = SQLAlchemy(app)  

      class User(db.Model):  
          id = db.Column(db.Integer, primary_key=True)  
          username = db.Column(db.String(80), unique=True, nullable=False)  

          def __repr__(self):  
              return f"<User {self.username}>"  

      if __name__ == "__main__":  
          db.create_all()  
          app.run(debug=True)  
      ```  

   -> extensions for flask allow it to be tailored to specific project needs. examples include:  
      -> flask-wtf for form handling  
      -> flask-login for user authentication  
      -> flask-migrate for database migrations  

-> summary: what is flask?  
   -> flask is a python microframework for building lightweight and scalable web applications  
   -> its simplicity makes it a favourite for startups and enterprises alike  
   -> flask originated as a joke but has become a vital tool for developers worldwide  
   -> it is flexible, allowing developers to start with minimal features and expand as needed using open-source extensions  
   -> flask enables rapid development and is suitable for both beginners and advanced developers  

   example of using flask with an open-source extension:  

   ```python  
   from flask import Flask  
   from flask_wtf import FlaskForm  
   from wtforms import StringField, SubmitField  
   from wtforms.validators import DataRequired  

   app = Flask(__name__)  
   app.secret_key = "your_secret_key"  

   class NameForm(FlaskForm):  
       name = StringField("What is your name?", validators=[DataRequired()])  
       submit = SubmitField("Submit")  

   @app.route("/", methods=["GET", "POST"])  
   def index():  
       form = NameForm()  
       if form.validate_on_submit():  
           return f"Hello, {form.name.data}!"  
       return f''' 
       <form method="post"> 
           {form.csrf_token} 
           {form.name.label} {form.name} 
           {form.submit} 
       </form> 
       '''  

   if __name__ == "__main__":  
       app.run(debug=True)  